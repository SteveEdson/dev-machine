---

- name: Run windows roles
  include_role:
    name: windows
  when: "ansible_os_family == 'Windows'"

- name: Create ack config file if it doesn't exist
  file:
    path: ~/.ackrc
    state: touch

- name: Ack config file
  lineinfile: dest=~/.ackrc line='{{ item }}'
  with_items:
    - "--ignore-directory=is:node_modules"
    - "--ignore-directory=is:bower_components"
    - "--type-set=sass:ext:scss,sass"
    - "--type-set=scss:ext:scss,sass"
    - "--type-set=markdown:ext:md,markdown"
    - "--type-set=md:ext:md,markdown"

- name: Create system aliases
  lineinfile: dest=~/.zshrc line='alias {{ item.key }}=\"{{ item.value }}\"'
  with_dict: "{{aliases}}"
  vars:
    aliases:
      gcod: "git checkout development"
      gcos: "git checkout staging"
      gcop: "git checkout production"
      gmd: "git merge development"
      gms: "git merge staging"
      gmp: "git merge production"
      gc: "git commit -m"
      gs: git status
      gpl: git pull
      gp: git push  
      gpt: "git push --tags"
      gph: git push
      update: "git push && gcos && gmd && git push && gcop && gms && git push && gcod"
      bu: brew update
      art: php artisan
      derpal: drupal
      derp: drupal
      tweet: t tweet
      tweets: t timeline -n 100
      docker_clean_images: 'docker rmi \$(docker images -a --filter=dangling=true -q) --force'
      docker_clean_containers: 'docker rm -v \$(docker ps -a -q -f status=exited)'
      docker_clean_volumes: 'docker volume rm \$(docker volume ls -qf dangling=true)'
      docker_clean: docker_clean_images; docker_clean_containers; docker_clean_volumes
      time_estimate: 'docker run --rm -v \$(pwd):/code khor/git-hours'
      git: hub
      wherefiles: "lsof | awk '{ print $2; }' | uniq -c | sort -rn | head"
      ls: exa
      copy_ssh: "cat ~/.ssh/id_rsa.pub | pbcopy"
      nah: "git reset --hard;git clean -df"
      migrate: "php artisan migrate"
      chrome: "/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
      octal: "stat -f '%A %a %N'"
      ip: "curl icanhazip.com"
      pg: phonegap
      "docker-gc": "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /etc:/etc -e REMOVE_VOLUMES=1 spotify/docker-gc"
      lg: "git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(red)%h%C(r) —— %C(bold blue)%an%C(r): %C(white)%s%C(r) %C(dim white) %C(bold green)(%ar)%C(r) %C(bold yellow)%d%C(r)' --all"
      vb: "version-bumper"

#- name: Check if global npm directory exists
#  stat: path={{ ansible_env.HOME }}/.npm_packages
#  register: npm_dir_exists
#
#- name: Create npm packages directory
#  file: path={{ ansible_env.HOME }}/.npm_packages state=directory
#  when: npm_dir_exists.stat.exists == false

- name: ZSH Config
  lineinfile: dest=~/.zshrc line='{{ item }}'
  with_items:
    - "source $(brew --prefix)/share/antigen/antigen.zsh"
    - "antigen bundle zsh-users/zsh-syntax-highlighting"
    - "antigen apply"
    - "export EDITOR=nano"
    - "export PATH=$PATH:~/.composer/vendor/bin"
    - 'export PATH="$PATH:\$(yarn global bin)"'
    - 'export PATH=$PATH:vendor/bin'
    - 'COMPLETION_WAITING_DOTS="true"'

- name: Check that Hyper config has been symlinked
  stat: path={{ ansible_env.HOME }}/.hyper.js
  register: hyper_config

- name: Delete old hyperterm file
  file: path={{ ansible_env.HOME }}/.hyper.js state=absent
  when:
    - hyper_config.stat.exists == true
    - hyper_config.stat.islnk == false

- name: Hyperterm Config
  file: src={{ playbook_dir }}/roles/dev/files/hyper.js dest={{ ansible_env.HOME }}/.hyper.js state=hard

- name: Check status of Laravel HTML driver file
  stat: path={{ ansible_env.HOME }}/.valet/Drivers/BasicHtmlSuffixValetDriver.php
  register: valet_html_driver

- name: Delete old valet driver file if not linked
  file: path={{ ansible_env.HOME }}/.valet/Drivers/BasicHtmlSuffixValetDriver.php state=absent
  when:
    - valet_html_driver.stat.exists == true
    - valet_html_driver.stat.islnk == false

- name: Make sure PIP is installed
  easy_install: name=pip state=latest
  # become: yes
  ignore_errors: yes

- name: Install PIP packages
  pip: name={{ item }} state=latest
  # become: yes
  extra_args: --user
  ignore_errors: yes
  with_items:
    - tldr
    - proselint
    - whereami
    
#- name: Install PIP 3 packages
#  pip: name={{ item }} state=present executable=pip3
#  with_items:
#    - gitsome

- name: Install global Composer packages
  ignore_errors: yes
  composer: 
    command: "require" 
    working_dir: "{{ ansible_env.HOME }}/.composer"
    no_dev: no
    arguments: "{{ item.name }} {% if 'version' in item %}{{ item.version }}{% endif %}"
  with_items:
    - { name: "laravel/installer" }
    - { name: "laravel/homestead" }
    - { name: "laravel/valet", version: "dev-master" }
    
- name: Copy script to convert pfx files
  file: src={{ playbook_dir }}/roles/dev/files/convert-pfx.sh dest=/usr/local/bin/convert-pfx state=hard mode=u+x
