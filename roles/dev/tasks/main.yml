---

- name: Run windows roles
  include_role:
    name: windows
  when: "ansible_os_family == 'Windows'"

- name: Create ack config file if it doesn't exist
  copy:
    content: ""
    dest: ~/.ackrc
    force: no

- name: Ack config file
  lineinfile: dest=~/.ackrc line='{{ item }}'
  with_items:
    - "--ignore-directory=is:node_modules"
    - "--ignore-directory=is:bower_components"
    - "--ignore-directory=is:vendor"
    - "--type-set=sass:ext:scss,sass"
    - "--type-set=scss:ext:scss,sass"
    - "--type-set=markdown:ext:md,markdown"
    - "--type-set=md:ext:md,markdown"
    - "--type-set=vue:ext:vue"
    - "--smart-case"

- name: Create system aliases
  lineinfile: dest=~/.zshrc line='alias {{ item.key }}=\"{{ item.value }}\"'
  with_dict: "{{ aliases }}"
  vars:
    aliases:
      a: "php artisan"
      fresh: "php artisan migrate:fresh --seed"
      seed: "php artisan db:seed"
      cfresh: "rm -rf vendor/ composer.lock && composer i"
      nfresh: "rm -rf node_modules/ package-lock.json && yarn install"
      gb: "git branch"
      gc: "git checkout"
      amend: "git add . && git commit --amend --no-edit"
      commit: "git add . && git commit -m"
      p: "pest"
      gcod: "git checkout development"
      gcos: "git checkout staging"
      gcop: "git checkout production"
      gmd: "git merge development"
      gms: "git merge staging"
      gmp: "git merge production"
      gco: "git commit -m"
      gs: git status
      gpl: git pull
      gp: git push
      gpt: "git push --tags"
      update: "git push && gcos && gmd && git push && gcop && gms && git push && gcod"
      bu: brew update
      bug: brew upgrade
      art: php artisan
      git: hub
      ls: exa --icons
      copy_ssh: "cat ~/.ssh/id_rsa.pub | pbcopy"
      nah: "git reset --hard;git clean -df"
      migrate: "php artisan migrate"
      chrome: "/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
      octal: "stat -f '%A %a %N'"
      ip: "curl icanhazip.com"
      lg: "git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(red)%h%C(r) —— %C(bold blue)%an%C(r): %C(white)%s%C(r) %C(dim white) %C(bold green)(%ar)%C(r) %C(bold yellow)%d%C(r)' --all"
      vb: "version-bumper"
      cat: bat
      ping: 'prettyping --nolegend'
      preview: "fzf --preview 'bat --color \"always\" {}'"
      du: "ncdu --color dark -rr -x --exclude .git --exclude node_modules"
      da: "docker run mplatform/mquery $2"
      docui: "docker run --rm -itv /var/run/docker.sock:/var/run/docker.sock skanehira/docui"
      ha: hass-cli
      ffsend: "docker run --rm -it -v $PWD:/data timvisee/ffsend"
      gcf: "git diff-tree -r --no-commit-id --name-only --diff-filter=ACMRT $2 | zip changed-$2.zip -@"
      dart: "docker-compose exec php php artisan $2"

#- name: Check if global npm directory exists
#  stat: path={{ ansible_env.HOME }}/.npm_packages
#  register: npm_dir_exists
#
#- name: Create npm packages directory
#  file: path={{ ansible_env.HOME }}/.npm_packages state=directory
#  when: npm_dir_exists.stat.exists == false

- name: ZSH Config
  lineinfile: dest=~/.zshrc line='{{ item }}'
  with_items:
    - "DEFAULT_USER=steve"
    - "export NVM_AUTO_USE=true"
    - "autoload -Uz compinit && compinit"
    - "export EDITOR=nano"
    - "export PATH=$PATH:~/.composer/vendor/bin"
    - 'export PATH="$PATH:\$(yarn global bin)"'
    - 'export PATH=$PATH:vendor/bin'
    - "export FZF_DEFAULT_OPTS=\"--bind='ctrl-o:execute(code {})+abort'\""
    - "source /opt/homebrew/opt/powerlevel10k/powerlevel10k.zsh-theme"
    - "[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh"

- name: ZSH Cleanup
  lineinfile:
    dest: ~/.zshrc
    line: "ZSH_THEME=\"agnoster\""
    state: absent

- name: ZSH Cleanup
  lineinfile:
    dest: ~/.zshrc
    line: "ZSH_THEME=\"minimal\""
    state: absent

- name: Install PIP 3 packages
  pip:
    state: present
    executable: pip3
    name:
      - homeassistant-cli

- name: Install global Composer packages
  ignore_errors: yes
  community.general.composer:
    command: "require"
    working_dir: "{{ ansible_env.HOME }}/.composer"
    no_dev: no
    arguments: "{{ item.name }} {% if 'version' in item %}{{ item.version }}{% endif %}"
  with_items:
    - { name: "laravel/installer" }
